name: Docker Image CI

on:
  push:
    branches: [ "main" ]
    paths:
      - 'Dockerfile'  # Only run if Dockerfile changes
  pull_request:
    branches: [ "main" ]
    paths:
      - 'Dockerfile'  # Only run if Dockerfile changes
  create:
    tags:  # Only run when a new tag is created

jobs:
  build:
    if: github.event_name != 'create' || github.event.ref_type != 'tag'
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Build the Docker image
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag sf_automation:latest

  test:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Set up Python environment and run tests
      - name: Set up and run tests
        run: |
          # Create a Python virtual environment and activate it
          python3 -m venv venv
          source venv/bin/activate
          
          # Install pytest, testinfra, and any other requirements
          pip install pytest testinfra

          # Run the pytest command to generate JUnit test result file
          mkdir -p reports
          pytest tests/docker/test_sf_automation.py --junitxml=reports/test-results.xml

      # Upload test results for GitHub Actions
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: reports/test-results.xml

      # Visualize the JUnit test results (nice report)
      - name: Publish JUnit Test Report
        uses: dorny/test-reporter@v1
        if: always()
        with:
          name: JUnit Tests
          path: reports/test-results.xml
          reporter: junit

  push:
    # This job runs only when a new tag is created
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Log in to DockerHub
      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKERHUB_TOKEN }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin

      # Build the Docker image with the tag
      - name: Build the Docker image with Tag
        run: |
          TAG_NAME=$(echo ${GITHUB_REF} | sed 's/refs\/tags\///')
          docker build . --file Dockerfile --tag sf_automation:${TAG_NAME}

      # Push the Docker image to DockerHub
      - name: Push the Docker image to DockerHub
        run: |
          TAG_NAME=$(echo "${GITHUB_REF}" | sed 's/refs\/tags\///')
          docker tag sf_automation:${TAG_NAME} ${{ secrets.DOCKERHUB_USERNAME }}/sf_automation:${TAG_NAME}
          docker push ${{ secrets.DOCKERHUB_USERNAME }}/sf_automation:${TAG_NAME}
